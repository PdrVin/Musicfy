@using WebUI.ViewModels.Home

@model DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
    var topArtists = Model.TopArtistsByMusicCount;
}

<div class="section mt-4">
    <h2 class="text-center m-4">Dashboard</h2>

    <main class="container text-white text-center py-2">
        <section class="row g-2">

            <div class="col-8">
                <div class="row g-2">

                    <card class="col-md-3 mb-2">
                        <a class="card bg-body border-5 border-primary shadow-sm text-white text-decoration-none"
                            href="/Artist/Index">
                            <div class="card-body">
                                <h5 class="card-title">Artistas</h5>
                                <p class="card-text display-6">@Model.TotalArtists</p>
                            </div>
                        </a>
                    </card>

                    <card class="col-md-3 mb-2">
                        <a class="card bg-body border-5 border-success shadow-sm text-white text-decoration-none"
                            href="/Album/Index">
                            <div class="card-body">
                                <h5 class="card-title">Álbuns</h5>
                                <p class="card-text display-6">@Model.TotalAlbums</p>
                            </div>
                        </a>
                    </card>

                    <card class="col-md-3 mb-2">
                        <a class="card bg-body border-5 border-warning shadow-sm text-white text-decoration-none"
                            href="/Music/Index">
                            <div class="card-body">
                                <h5 class="card-title">Músicas</h5>
                                <p class="card-text display-6">@Model.TotalMusics</p>
                            </div>
                        </a>
                    </card>

                    <card class="col-md-3 mb-2">
                        <a class="card bg-body border-5 border-danger shadow-sm text-white text-decoration-none"
                            href="/Playlist/Index">
                            <div class="card-body">
                                <h5 class="card-title">Playlists</h5>
                                <p class="card-text display-6">@Model.TotalPlaylists</p>
                            </div>
                        </a>
                    </card>

                    <graph class="row g-2">
                        <div class="card col-6 bg-dark border-0 text-white mx-auto p-2">
                            <canvas id="musicsByArtistChart"></canvas>
                        </div>

                        <div class="card col-6 bg-dark border-0 text-white mx-auto p-2">
                            <canvas id="albumsByArtistChart"></canvas>
                        </div>
                    </graph>

                </div>
            </div>

            <div class="card bg-body border-0 col-4 mb-4 mx-auto px-3">
                <h3 class="text-center pb-2">Top 10 Artistas</h3>
                <table class="table table-sm border border-3 border-success table-striped table-dark">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Artista</th>
                            <th>Músicas</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < topArtists.Count; i++)
                        {
                            <tr class="align-middle">
                                <td>@(i + 1)</td>
                                <td>@topArtists[i].Name</td>
                                <td>@topArtists[i].Musics!.Count</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

        </section>
    </main>

</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const musicsCtx = document.getElementById('musicsByArtistChart').getContext('2d');
        const myDoughnutChart = new Chart(musicsCtx, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Json.Serialize(ViewBag.MusicLabels)),
                datasets: [{
                    label: 'Músicas',
                    data: @Html.Raw(Json.Serialize(ViewBag.MusicValues)),
                    backgroundColor: [
                        '#0d6efd', @* blue *@
                        '#6610f2', @* indigo *@
                        '#6f42c1', @* purple *@
                        '#d63384', @* pink *@
                        '#dc3545', @* red *@
                        '#fd7e14', @* orange *@
                        '#ffc107', @* yellow *@
                        '#198754', @* green *@
                        '#20c997', @* teal *@
                        '#0dcaf0', @* cyan *@
                        '#adb5bd', @* gray *@
                    ],
                    borderColor: '#121212',
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Músicas por Artista',
                        fullSize: true,
                        font: { size: 28, family: "Segoe UI", weight: 'normal' },
                        color: "#fff"
                    },
                    legend: {
                        position: "left",
                        labels: {
                            boxWidth: 15,
                            font: { weight: 'lighter' },
                            color: 'white'
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                const label = context.label || '';
                                const value = context.raw;
                                const data = context.dataset.data;
                                const total = data.reduce((sum, val) => sum + val, 0);
                                const percentage = ((value / total) * 100).toFixed(1);
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    </script>
    <script>
        const albumsCtx = document.getElementById('albumsByArtistChart').getContext('2d');
        const albumsChart = new Chart(albumsCtx, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Json.Serialize(ViewBag.AlbumLabels)),
                datasets: [{
                    label: 'Álbuns',
                    data: @Html.Raw(Json.Serialize(ViewBag.AlbumValues)),
                    backgroundColor: [
                        '#0d6efd', @* blue *@
                        '#6610f2', @* indigo *@
                        '#6f42c1', @* purple *@
                        '#d63384', @* pink *@
                        '#dc3545', @* red *@
                        '#fd7e14', @* orange *@
                        '#ffc107', @* yellow *@
                        '#198754', @* green *@
                        '#20c997', @* teal *@
                        '#0dcaf0', @* cyan *@
                        '#adb5bd', @* gray *@
                    ],
                    borderColor: '#121212',
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Álbuns por Artista',
                        fullSize: true,
                        font: { size: 28, family: "Segoe UI", weight: 'normal' },
                        color: "#fff"
                    },
                    legend: {
                        position: "left",
                        labels: {
                            boxWidth: 15,
                            font: { weight: 'lighter' },
                            color: 'white'
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw;
                                const data = context.dataset.data;
                                const total = data.reduce((sum, val) => sum + val, 0);
                                const percentage = ((value / total) * 100).toFixed(1);
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    </script>
}